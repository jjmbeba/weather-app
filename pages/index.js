import Head from "next/head";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import Forecast from "../components/Forecast";
import Header from "../components/Header";
import Highlights from "../components/Highlights";
import Overview from "../components/Overview";
import SearchMenu from "../components/SearchMenu";
import Units from "../components/Units";
import axios from "axios";
import { setForecast, setResults } from "../slices/menuSlice";
import Loading from "../components/Loading";

export default function Home() {
  const menuState = useSelector((state) => state.menuState);
  const location = useSelector((state) => state.location);
  const results = useSelector((state) => state.results);
  const forecast = useSelector((state) => state.forecast);
  const dispatch = useDispatch();

  const [coord, setCoord] = useState({
    latitude:0,
    longitude:0
  })

  const success = (position) => {
    setCoord({
      latitude:position.coords.latitude,
      longitude:position.coords.longitude
    })
  }

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(success)
    location !== "" ? axios
    .get(
      `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${process.env.NEXT_PUBLIC_API_KEY}&units=metric`
    )
    .then((response) => {
      dispatch(setResults(response.data));
    }) : axios
    .get(
      `https://api.openweathermap.org/data/2.5/weather?lat=${coord.latitude}&lon=${coord.longitude}&appid=${process.env.NEXT_PUBLIC_API_KEY}&units=metric`
    )
    .then((response) => {
      dispatch(setResults(response.data));
    });
    

    location !== '' ? axios
      .get(
        `https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=${process.env.NEXT_PUBLIC_API_KEY}&cnt=5&units=metric`
      )
      .then((response) => {
        dispatch(setForecast(response.data.list));
      }): axios
      .get(
        `https://api.openweathermap.org/data/2.5/forecast?lat=${coord.latitude}&lon=${coord.longitude}&appid=${process.env.NEXT_PUBLIC_API_KEY}&cnt=5&units=metric`
      )
      .then((response) => {
        dispatch(setForecast(response.data.list));
      }) 
  }, [location]);

  //

  return (
    <div>
      <Head>
        <title>Weather app</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/cloudy.png" />
      </Head>

      {results && forecast ? (
        <main className="font-raleway w-screen h-full">
          <div className="md:w-[32%] md:fixed md:h-screen w-screen">
            <Header lat={coord.latitude} lon={coord.longitude} />
            <i className={`wi wi-owm-${results.weather[0].icon}`}></i>
            <Overview
              temp={results.main.temp}
              weather={results.weather[0].main}
            />
            {menuState && <SearchMenu />}
          </div>
          <div className="md:w-[68%] md:absolute static top-0 right-0">
            <div className="w-full md:flex items-center justify-end gap-[12px] pt-[2.9vw] pr-[8vw] bg-[#100E1D] hidden">
              <Units unit="°C" />
              <Units unit="°F" />
            </div>
            <Forecast />
            <Highlights />
          </div>
        </main>
      ) : (
        <Loading />
      )}
    </div>
  );
}
